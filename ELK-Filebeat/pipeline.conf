input {
  beats {
    port => 5044
    include_codec_tag => false
  }
}
filter {
  mutate { # replace your network's private IPs that users should not see. Even before any parsing occurs. These two are just samples!
    gsub => [
      "message", "234.567.123.", "255.255.234.",
      "message", "23.25.12.",    "255.255.235."
    ]
  }
  grok { # First pattern is for Nginx, second is IIS. For IIS x-f-f and request ID custom headers logging is added.
    match => {
      "message" => [
        "\[%{DATA:[time]}\] (?:%{NGINX_ADDRESS_LIST:[remote_ip_list]}|%{NOTSPACE:[source_address]}) \"%{DATA:[r][host]}\" \"%{DATA:[access_info]}\" %{NUMBER:[r][status]} %{NUMBER:[r][bytes][received]} %{NUMBER:[r][bytes][sent]} \"(-|%{DATA:[r][h][referer]})\" \"(-|%{DATA:[c][ua][full]})\" \"(-|%{DATA:[r][h][x_forwarded_for]})\" (-|%{NUMBER:[r][time]}) \"(-|%{DATA:[ups][connect]})\" \"(-|%{DATA:[ups][header]})\" \"(-|%{DATA:[ups][response]})\" \"(-|%{DATA:[ups][address]})\" \"(-|%{DATA:[ups][status]})\" (-|%{DATA:[r][cache_status]}) (-|%{GREEDYDATA:[r][id]})",
        "%{TIMESTAMP_ISO8601:[time]} %{NOTSPACE:[s][name]} %{IP:[s][ip]} %{WORD:[r][method]} %{NOTSPACE:[r][uri][full]} (-|%{NOTSPACE:[r][query]}) %{NUMBER:[s][port]} %{NOTSPACE} (-|%{IP:[c][ip][source]}) HTTP/%{NUMBER:[r][http]} (-|%{NOTSPACE:[c][ua][full]}) (-|%{NOTSPACE:[r][h][referer]}) (-|%{NOTSPACE:[r][host]}) %{NUMBER:[r][status]:int} %{NUMBER} %{NUMBER} %{NUMBER:[r][bytes][sent]:int} %{NUMBER:[r][bytes][received]:int} %{NUMBER:[r][time]:int} ((-|%{NOTSPACE:[r][h][x_forwarded_for]}) (-|%{GREEDYDATA:[r][id]}))?"
      ]
    }
    pattern_definitions => {
      "NGINX_ADDRESS_LIST" => "(?:%{IP}|%{WORD})(\"?,?\s*(?:%{IP}|%{WORD}))*"
    }
    remove_field => "message"
  }

  date {
    match => [
      "[time]",
      "dd/MMM/yyyy:H:m:s Z",
      "dd/MMM/yyyy:HH:mm:ss.SSS Z",
      "yyyy-MM-dd HH:mm:ss",
      "ISO8601",
      "UNIX_MS"
    ]
    target       => "@timestamp"
    remove_field => "[time]"
  }
  
  if [service][type] == "nginx" {
    grok {
      match => {
        "[access_info]" => [
            "%{WORD:[r][method]} %{DATA:[r][uri][full]}(\?%{DATA:[r][query]})? HTTP/%{NUMBER:[r][http]}",
            ""
        ]
      }
      remove_field => "[access_info]"
    }

    ruby { # convert request time-taken to milliseconds
      code => "event.set('[r][time]', event.get('[r][time]').to_f * 1000)"
    }
  
    if [ups][address] {
      grok {
        match => {
          "[ups][address]" => "(.+ )?%{DATA:[s][ip]}:%{NUMBER:[s][port]}"
        }
      }
      if [s][ip] { # resolve IP to hostname to get beautiful upstream name
        mutate {
          copy => {
            "[s][ip]" => "[s][name]"
          }
        }
        dns {
          reverse           => "[s][name]"
          action            => "replace"
          hit_cache_size    => 1000
          hit_cache_ttl     => 86400
          failed_cache_size => 100
          failed_cache_ttl  => 120
        }
        if [s][ip] == [s][name] {
          mutate {
            remove_field => "[s][name]"
          }
        } else {
          mutate { # convert from FQDN
            gsub => [
              "[s][name]", "(.+?)\..+", "\1"
            ]
          } 
        }
      }
    } # end filling [server] fields
    
    if "" in [remote_ip_list] {
      grok {
          match => {
            "[remote_ip_list]" => "^%{IP:[c][ip][origin]}$"
          }
      }
    } else if "" in [source_address] {
      grok {
          match => {
            "[source_address]" => "^%{IP:[c][ip][origin]}$"
          }
      }
    }

    if "" in [ups][connect] and "" in [ups][status] {
      split {
          field      => "[ups][connect]"
          terminator => ", "
      }
      split {
          field      => "[ups][header]"
          terminator => ", "
      }
      split {
          field      => "[ups][response]"
          terminator => ", "
      }
      split {
          field      => "[ups][address]"
          terminator => ", "
      }
      split {
          field      => "[ups][status]"
          terminator => ", "
      }
    }
  } # end Nginx block
  
  if [r][h][x_forwarded_for] {
    if [service][type] == "iis" {
      grok {
        match => { "[r][h][x_forwarded_for]" => "%{IP:[c][ip][origin]}(,.+)?" }
      }
    }
    mutate {
      gsub => [
        "[r][h][x_forwarded_for]", "[ +]|unknown", "",
        "[r][h][x_forwarded_for]", ",(?=,|$)|(?<=^),", ""
      ]
      split => {
          "[r][h][x_forwarded_for]" => ","
      }
    }
  } # end r.h.x_forwarded_for processing

  if [c][ua][full] {
    useragent {
      source => "[c][ua][full]"
      target => "[c][ua]"
    }
    if [c][ua][name] != "Other" and [c][ua][major] {
      mutate {
        add_field => {
          "[c][ua][b][full]" => "%{[c][ua][name]} %{[c][ua][major]}"
        }
      }
    }
    mutate {
      remove_field => [
        "[c][ua][os]"
      ]
    }
    mutate {
      rename => [
        "[c][ua][name]",     "[c][ua][b][name]",
        "[c][ua][major]",    "[c][ua][b][major]",
        "[c][ua][minor]",    "[c][ua][b][minor]",
        "[c][ua][os_name]",  "[c][ua][os][name]",
        "[c][ua][os_full]",  "[c][ua][os][full]",
        "[c][ua][os_major]", "[c][ua][os][major]",
        "[c][ua][os_minor]", "[c][ua][os][minor]"
      ]
      remove_field => [
        "[c][ua][patch]",
        "[c][ua][version]",
        "[c][ua][os_patch]",
        "[c][ua][os_version]"
      ]
    }
    if [c][ua][os][major] in ["XP", "NT", "Vista"] {
      mutate {
        gsub => [
          "[c][ua][os][major]", "NT",    "4",
          "[c][ua][os][major]", "XP",    "5.1",
          "[c][ua][os][major]", "Vista", "6"
        ]
      }
    }
  } # end c.ua processing

  if [c][ip][origin] {
    geoip {
      source => "[c][ip][origin]"
      target => "[c][geo]"
      fields => ["city_name", "country_name", "latitude", "longitude", "timezone"]
    }
    
    if [c][geo][latitude] and [c][geo][longitude] {
      mutate {
        rename => {
          "[c][geo][latitude]"  => "[c][geo][point][lat]"
          "[c][geo][longitude]" => "[c][geo][point][lon]"
        }
      }
      mutate {
        rename => [
          "[c][geo][city_name]",    "[c][geo][city]",
          "[c][geo][country_name]", "[c][geo][country]"
        ]
      }
    }
  } # end c.geo procesing

  mutate { # copy operation has lower priority than gsub. So we have to define two mutate blocks for strong order of r.uri.norm processing
    copy => {
      "[r][uri][full]"  => "[r][uri][norm]",
      "[host][name]"    => "[l][source]"
      "[service][type]" => "[l][software]"
    }
  }
  mutate { # uri normalizing is replacing all numbers with 'N' to group them more efficiently
    gsub => [
      "[r][uri][norm]", "[A-Fa-f0-9]*\d[A-Fa-f0-9]*", "N",
      "[c][ua][full]",  "\+", " "
    ]
    remove_field => [
      "source_address",
      "remote_ip_list"
    ]
  }
  
  # using [@metadata] is like defining internal variables for this pipeline
  if [service][type] == "iis" {
    mutate { add_field => { "[@metadata][indexshard]" => "iis" } }
  } else if [service][type] == "nginx" {
    mutate { add_field => { "[@metadata][indexshard]" => "nginx" } }
  } else {
    mutate { add_field => { "[@metadata][indexshard]" => "other" } }
  }
}
output {
  elasticsearch {
    hosts => "elasticsearch"
    index => "filebeat-web-%{[@metadata][indexshard]}-%{+YYYY.MM.dd}"
    ecs_compatibility => disabled
  }
}
